---
import { getCollection } from "astro:content";
import CarouselItem from "@components/CarouselItem";

const latestPosts = (await getCollection("posts"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
    .slice(0, 3);
---

<div id="default-carousel" class="relative w-full" data-carousel="slide">
    <!-- Carousel wrapper -->
    <div class="relative h-56 overflow-hidden rounded-lg md:h-96">
        {latestPosts.map(({ data: { title, description, image }, slug }, index) => (
            <CarouselItem title={title} description={description} image={image} slug={slug} index={index} />
        ))}
    </div>
      
    <!-- Slider controls -->
    <button type="button" class="absolute top-0 start-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-prev>
        <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 group-hover:bg-white/50 group-focus:ring-4 group-focus:ring-white">
            <svg class="w-4 h-4 text-white rtl:rotate-180" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 1 1 5l4 4"/>
            </svg>
            <span class="sr-only">Previous</span>
        </span>
    </button>
    <button type="button" class="absolute top-0 end-0 z-30 flex items-center justify-center h-full px-4 cursor-pointer group focus:outline-none" data-carousel-next>
        <span class="inline-flex items-center justify-center w-10 h-10 rounded-full bg-white/30 group-hover:bg-white/50 group-focus:ring-4 group-focus:ring-white">
            <svg class="w-4 h-4 text-white rtl:rotate-180" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 6 10">
                <path stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="m1 9 4-4-4-4"/>
            </svg>
            <span class="sr-only">Next</span>
        </span>
    </button>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
  const carousel = document.getElementById("default-carousel");
  const items = carousel.querySelectorAll("[data-carousel-item]");
  const prevButton = carousel.querySelector("[data-carousel-prev]");
  const nextButton = carousel.querySelector("[data-carousel-next]");
  const indicators = carousel.querySelectorAll("[data-carousel-slide-to]");
  
  let currentIndex = 0;
  
  // Set up initial carousel state with Tailwind classes
  items.forEach((item, i) => {
    // Add required Tailwind classes for positioning and transitions
    item.classList.add("absolute", "inset-0", "transition-opacity", "duration-500", "ease-in-out");
    
    // Set initial opacity based on index
    if (i === 0) {
      item.classList.add("opacity-100", "z-10");
      item.classList.remove("opacity-0", "z-0");
    } else {
      item.classList.add("opacity-0", "z-0");
      item.classList.remove("opacity-100", "z-10");
    }
    
    // Make sure we're not using hidden class
    item.classList.remove("hidden");
  });
  
  function updateCarousel(index) {
    items.forEach((item, i) => {
      if (i === index) {
        // Show current slide
        item.classList.add("opacity-100", "z-10");
        item.classList.remove("opacity-0", "z-0");
      } else {
        // Hide other slides
        item.classList.add("opacity-0", "z-0");
        item.classList.remove("opacity-100", "z-10");
      }
    });

    indicators.forEach((indicator, i) => {
      indicator.setAttribute("aria-current", i === index);
    });

    currentIndex = index;
  }

  prevButton.addEventListener("click", () => {
    const newIndex = (currentIndex - 1 + items.length) % items.length;
    updateCarousel(newIndex);
  });

  nextButton.addEventListener("click", () => {
    const newIndex = (currentIndex + 1) % items.length;
    updateCarousel(newIndex);
  });

  indicators.forEach((indicator, i) => {
    indicator.addEventListener("click", () => updateCarousel(i));
  });

  // Show the first slide initially
  updateCarousel(0);
});
</script>
